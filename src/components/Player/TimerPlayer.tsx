import React, { useEffect, useState, useRef } from 'react';
import TimerSphereCanvas from '../TimerSphere';
import './Player.css';

interface TimerPlayerProps {
  duration: number;
  title: string;
  meditationObject?: string; // –û–±—ä–µ–∫—Ç –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ (–º—ã—Å–ª—å, –¥—ã—Ö–∞–Ω–∏–µ, —Ç–µ–ª–æ, –±–µ–∑ –æ–±—ä–µ–∫—Ç–∞)
  instructions?: string;
  audioUrl?: string; // –§–æ–Ω–æ–≤–æ–µ –∞—É–¥–∏–æ –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏
  autoStart?: boolean; // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
}

const TimerPlayer: React.FC<TimerPlayerProps> = ({ 
  duration,
  audioUrl,
  autoStart = true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω
}) => {
  const [isPlaying, setIsPlaying] = useState(autoStart);
  const [timeLeft, setTimeLeft] = useState(duration);
  const timerRef = useRef<number | null>(null);
  const startTimeRef = useRef<number | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ
  useEffect(() => {
    console.log('üéµ TimerPlayer: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É–¥–∏–æ...');
    console.log('üìù –ü–æ–ª—É—á–µ–Ω audioUrl:', audioUrl);
    
    if (audioUrl && audioRef.current) {
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç...');
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º https:// –µ—Å–ª–∏ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å //
      let fullAudioUrl = audioUrl;
      if (audioUrl.startsWith('//')) {
        fullAudioUrl = 'https:' + audioUrl;
        console.log('üîó –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL —Å https:', fullAudioUrl);
      }
      
      audioRef.current.src = fullAudioUrl;
      audioRef.current.loop = true;
      audioRef.current.volume = 0.3; // –¢–∏—Ö–æ–µ —Ñ–æ–Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
      audioRef.current.crossOrigin = 'anonymous'; // –î–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      console.log('üîß –ê—É–¥–∏–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: src =', audioRef.current.src, 'volume =', audioRef.current.volume);
    } else if (!audioUrl) {
      console.warn('‚ö†Ô∏è audioUrl –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ TimerPlayer');
    } else if (!audioRef.current) {
      console.warn('‚ö†Ô∏è audioRef.current –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  }, [audioUrl]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ duration
  useEffect(() => {
    setTimeLeft(duration);
    if (autoStart) {
      setIsPlaying(true);
      startTimeRef.current = Date.now();
    } else {
      setIsPlaying(false);
      startTimeRef.current = null;
    }
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }
  }, [duration, autoStart]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–µ–π/–ø–∞—É–∑–∞
  useEffect(() => {
    if (isPlaying) {
      console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ –∞—É–¥–∏–æ...');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
      if (audioRef.current && audioUrl) {
        console.log('üéµ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏–æ:', audioUrl);
        audioRef.current.play()
          .then(() => {
            console.log('‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ');
          })
          .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞—É–¥–∏–æ:', error);
          });
      } else {
        console.warn('‚ö†Ô∏è –ê—É–¥–∏–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–æ:', {
          hasAudioRef: !!audioRef.current,
          hasAudioUrl: !!audioUrl,
          audioUrl: audioUrl
        });
      }

      // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ
      if (startTimeRef.current === null) {
        startTimeRef.current = Date.now();
      } else if (timerRef.current === null) {
        // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –Ω–∞ –ø–∞—É–∑–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è
        const elapsedSeconds = duration - timeLeft;
        startTimeRef.current = Date.now() - (elapsedSeconds * 1000);
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      timerRef.current = window.setInterval(() => {
        const now = Date.now();
        const startTime = startTimeRef.current || now;
        const elapsedMilliseconds = now - startTime;
        const elapsedSeconds = Math.floor(elapsedMilliseconds / 1000);
        const newTimeLeft = Math.max(0, duration - elapsedSeconds);
        
        setTimeLeft(newTimeLeft);
        
        // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        if (newTimeLeft <= 0) {
          clearInterval(timerRef.current!);
          timerRef.current = null;
          startTimeRef.current = null;
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
          if (audioRef.current) {
            audioRef.current.pause();
          }
          
          setIsPlaying(false);
        }
      }, 100);
    } else {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∞—É–¥–∏–æ –ø—Ä–∏ –ø–∞—É–∑–µ
      if (audioRef.current) {
        audioRef.current.pause();
      }

      if (timerRef.current !== null) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
    }

    return () => {
      if (timerRef.current !== null) {
        clearInterval(timerRef.current);
      }
    };
  }, [isPlaying, duration, timeLeft, audioUrl]);

  return (
    <div className="timer-player-container" style={{
      display: 'flex',
      flexDirection: 'column',
      alignItems: 'center',
      gap: '2rem',
      padding: '2rem',
      background: '#191919',
      minHeight: '100vh',
      color: 'white'
    }}>
      {/* –°–∫—Ä—ã—Ç—ã–π –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –∑–≤—É–∫–∞ */}
      {audioUrl && (
        <audio ref={audioRef} preload="auto" style={{ display: 'none' }} />
      )}
      
      <div className="timer-player-header" style={{ textAlign: 'center', maxWidth: '400px' }}>
        <h2 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem' }}>
          –ó–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞<br />–∏ —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–µ–±–µ
        </h2>
        <p className="meditation-instructions" style={{ opacity: 0.8, fontSize: '0.875rem' }}>
          –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞.<br />
          –ù–µ –±–ª–æ–∫–∏—Ä—É–π—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å<br />
          –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏
        </p>
      </div>
      
      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ñ–µ—Ä–∞ —Ç–∞–π–º–µ—Ä–∞ */}
      <div style={{ 
        width: '600px', 
        height: '600px',
        maxWidth: '90vw',
        maxHeight: '50vh',
        position: 'relative',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }}>
        <TimerSphereCanvas
          isPlaying={isPlaying}
          timeLeft={timeLeft}
          totalDuration={duration}
        />
      </div>
      
      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ */}
      <div className="timer-time-display" style={{
        fontSize: '3rem',
        fontWeight: 'bold',
        fontFamily: 'monospace',
        background: 'linear-gradient(135deg, #6366f1, #a855f7)',
        backgroundClip: 'text',
        WebkitBackgroundClip: 'text',
        WebkitTextFillColor: 'transparent',
        textAlign: 'center'
      }}>
        {formatTime(timeLeft)}
      </div>
      
      <div className="timer-controls">
        <button 
          className="stop-btn" 
          onClick={() => {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∞—É–¥–∏–æ
            if (audioRef.current) {
              audioRef.current.pause();
              audioRef.current.currentTime = 0;
            }
            
            setIsPlaying(false);
            setTimeLeft(duration);
            startTimeRef.current = null;
          }}
          style={{
            padding: '12px 32px',
            fontSize: '1rem',
            fontWeight: 'bold',
            background: 'rgba(255, 255, 255, 0.1)',
            border: '2px solid rgba(255, 255, 255, 0.2)',
            borderRadius: '50px',
            color: 'white',
            cursor: 'pointer',
            transition: 'all 0.2s ease',
            backdropFilter: 'blur(10px)'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.background = 'rgba(255, 255, 255, 0.2)';
            e.currentTarget.style.transform = 'scale(1.05)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.background = 'rgba(255, 255, 255, 0.1)';
            e.currentTarget.style.transform = 'scale(1)';
          }}
        >
          –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        </button>
      </div>
    </div>
  );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (MM:SS)
const formatTime = (seconds: number): string => {
  if (isNaN(seconds)) return '00:00';
  
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.floor(seconds % 60);
  
  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
};

export default TimerPlayer; 